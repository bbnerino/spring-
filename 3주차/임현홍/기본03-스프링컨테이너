# [Spring 기본] 3. 스프링 컨테이너

### 스프링 컨테이너 생성

```java
@Configuration
public class AppConfig {
  @Bean
  public MemberService memberService() {
    return new MemberServiceImpl(memberRepository());
  }
  @Bean
  public OrderService orderService() {
    return new OrderServiceImpl(memberRepository(),discountPolicy());
  }
  @Bean
  public MemberRepository memberRepository() {
    return new MemoryMemberRepository();
  }
  @Bean
  public DiscountPolicy discountPolicy() {
    return new RateDiscountPolicy();
  }
}
```

```java
ApplicationContext applicationContext = new AnnotationConfigApplicationContext(AppConfig.class);
```

- `ApplicationContext`를 스프링 컨테이너라고 한다.
- XML 기반으로 만들 수도 있고, 애노테이션 기반으로도 만들 수 있다.
- `new AnnotationConfigApplicationContext(AppConfig.class)`
  - 스프링 컨테이너 생성하기
  - `AppConfig.class` => 구성 정보

> 스프링 컨테이너는 파라미터로 넘어온 설정 클래스 정보를 사용해서 스프링 빈을 등록한다.
> 빈 이름은 메서드 이름을 그대로 사용할 수도 있고
> `Bean(name="memberService")`처럼 이름을 부여할 수도 있다.

# 컨테이너의 빈 조회하기

---

### 모든 빈 출력하기

```java
class ApplicationContextInfoTest {
  AnnotationConfigApplicationContext ac = new
  AnnotationConfigApplicationContext(AppConfig.class);
  @Test
  @DisplayName("모든 빈 출력하기")
    void findAllBean() {
    String[] beanDefinitionNames = ac.getBeanDefinitionNames();
    for (String beanDefinitionName : beanDefinitionNames) {
      Object bean = ac.getBean(beanDefinitionName);
      System.out.println("name=" + beanDefinitionName + " object=" + bean);
    }
  }
}
```

`ac.getBeanDefinitionNames();` : 모든 빈을 출력한다
`ac.getBean()` : 빈 이름으로 빈 인스턴스(객체)를 조회한다.

### 애플리케이션 빈 출력하기

```java
@Test
@DisplayName("애플리케이션 빈 출력하기") void findApplicationBean() {
  String[] beanDefinitionNames = ac.getBeanDefinitionNames();
  for (String beanDefinitionName : beanDefinitionNames) {
    BeanDefinition beanDefinition = ac.getBeanDefinition(beanDefinitionName);

    if (beanDefinition.getRole() == BeanDefinition.ROLE_APPLICATION) {
      Object bean = ac.getBean(beanDefinitionName);
      System.out.println("name=" + beanDefinitionName + " object=" + bean);
    }
  }
}
```

- 내가 등록한 빈을 출력한다.
- getRole()을 통해 필터링을 거친다.
  - `ROLE_APPLICATION` : 직접 등록한 애플리케이션 빈
  - `ROLE_INFRASTRUCTURE` : 스프링이 내부에서 사용하는 빈

# 스프링 빈 조회

`ac.getBean` 을 사용한다.
타입이 필수고, 빈 이름은 선택이다.
`ac.getBean(빈이름,타입)` or `ac.getBean(타입)`

`NoSuchBeanDefinitionException` : 조회할 대상이 없다면 예외가 발생한다.

#### 예시

```java
@Test
@DisplayName("빈 이름으로 조회")
void findBeanByName() {
  MemberService memberService = ac.getBean("memberService",MemberService.class);
  assertThat(memberService).isInstanceOf(MemberServiceImpl.class);
}
```

```java
@Test
@DisplayName("이름 없이 타입만으로 조회")
void findBeanByType() {
  MemberService memberService = ac.getBean(MemberService.class);
  assertThat(memberService).isInstanceOf(MemberServiceImpl.class);
}
```

```java
@Test
@DisplayName("빈 이름으로 조회X")
void findBeanByNameX() {
  Assertions.assertThrows(NoSuchBeanDefinitionException.class,
    () ->ac.getBean("xxxxx", MemberService.class)
  );
}
```

### 동일한 타입이 여러개

`ac.getBeansOfType()`를 사용하면 해당 타입으로 여러 빈을 조회한다.

```java
@Test
@DisplayName("타입으로 조회시 같은 타입이 둘 이상 있으면, 중복 오류가 발생한다")
void findBeanByTypeDuplicate() {
  assertThrows(NoUniqueBeanDefinitionException.class,
    () ->ac.getBean(MemberRepository.class)
  );
}
```

```java
@Test
@DisplayName("특정 타입을 모두 조회하기")
void findAllBeanByType() {
  Map<String, MemberRepository> beansOfType =
  ac.getBeansOfType(MemberRepository.class);
  for (String key : beansOfType.keySet()) {
    System.out.println("key = " + key + " value = " + beansOfType.get(key));
  }
  System.out.println("beansOfType = " + beansOfType);
  assertThat(beansOfType.size()).isEqualTo(2);
}
```


## BeanFactory
- 스프링 컨테이너의 최상위 인터페이스
- 스프링 빈을 관리 조회한다.
- `getBean()`을 포함한 대부분의 기능을 제공한다.

## ApplicationContext
- BeanFactory 기능을 모두 상속받아서 제공한다.
- 빈 관리기능 + 편리한 부가 기능을 제공한다.

> BeanFactory나 ApplicationContext를 스프링 컨테이너라 한다.
